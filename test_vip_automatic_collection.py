#!/usr/bin/env python3
"""
VIP Automatic Collection Test - French Review Request
Tests the VIP automatic earnings collection system according to the French user's problem description
"""

import requests
import json
import sys
import os
from datetime import datetime

# Get backend URL from frontend .env file
def get_backend_url():
    try:
        with open('/app/frontend/.env', 'r') as f:
            for line in f:
                if line.startswith('REACT_APP_BACKEND_URL='):
                    return line.split('=', 1)[1].strip()
    except FileNotFoundError:
        return "http://localhost:8001"
    return "http://localhost:8001"

BACKEND_URL = get_backend_url()
API_BASE = f"{BACKEND_URL}/api"

class VIPAutomaticCollectionTester:
    def __init__(self):
        self.results = []
        self.total_tests = 0
        self.passed_tests = 0
        
    def log_result(self, test_name, success, message, details=None):
        """Log test result"""
        self.total_tests += 1
        if success:
            self.passed_tests += 1
            status = "‚úÖ PASS"
        else:
            status = "‚ùå FAIL"
            
        result = {
            "test": test_name,
            "status": status,
            "message": message,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.results.append(result)
        print(f"{status}: {test_name} - {message}")
        if details:
            print(f"   Details: {details}")
    
    def test_vip_automatic_collection_system(self):
        """Test FRENCH REVIEW REQUEST: Tester la correction du syst√®me de gains VIP automatique selon le probl√®me d√©crit par l'utilisateur fran√ßais"""
        try:
            print("\nüá´üá∑ TESTING VIP AUTOMATIC COLLECTION SYSTEM - FRENCH REVIEW REQUEST")
            print("=" * 80)
            print("PROBL√àME √Ä VALIDER:")
            print("1. Les gains VIP doivent se collecter automatiquement d√®s qu'une partie se termine")
            print("2. Le montant doit correspondre exactement aux frais de visionnage des VIPs du salon")
            print("3. L'argent doit s'afficher dans le menu o√π le gagnant appara√Æt")
            print("4. Tester avec diff√©rents niveaux de salon (1, 3, 6)")
            print()
            
            # Test 1: Salon niveau 3 (5 VIPs) - Test principal
            print("üîç TEST 1: SALON NIVEAU 3 (5 VIPs) - TEST COLLECTE AUTOMATIQUE")
            print("-" * 70)
            
            game_request = {
                "player_count": 25,
                "game_mode": "standard", 
                "selected_events": [1, 2, 3, 4],
                "manual_players": [],
                "vip_salon_level": 3  # Salon niveau 3 = 5 VIPs
            }
            
            response = requests.post(f"{API_BASE}/games/create", 
                                   json=game_request, 
                                   headers={"Content-Type": "application/json"},
                                   timeout=15)
            
            if response.status_code != 200:
                self.log_result("VIP Automatic Collection - Salon Level 3 Creation", False, f"Could not create game - HTTP {response.status_code}")
                return
                
            game_data = response.json()
            game_id = game_data.get('id')
            print(f"   ‚úÖ Partie cr√©√©e avec ID: {game_id}")
            
            # V√©rifier les VIPs assign√©s pour salon niveau 3
            vips_response = requests.get(f"{API_BASE}/vips/game/{game_id}?salon_level=3", timeout=10)
            
            if vips_response.status_code != 200:
                self.log_result("VIP Automatic Collection - VIP Assignment Level 3", False, f"Could not get VIPs - HTTP {vips_response.status_code}")
                return
                
            vips_data = vips_response.json()
            
            if not isinstance(vips_data, list) or len(vips_data) != 5:
                self.log_result("VIP Automatic Collection - VIP Assignment Level 3", False, f"Expected 5 VIPs for salon level 3, got {len(vips_data) if isinstance(vips_data, list) else 'non-list'}")
                return
            
            expected_vip_earnings = sum(vip.get('viewing_fee', 0) for vip in vips_data)
            print(f"   ‚úÖ {len(vips_data)} VIPs assign√©s avec viewing_fee total: {expected_vip_earnings:,}$")
            
            # Print VIP details
            vip_details = []
            for vip in vips_data:
                vip_name = vip.get('name', 'Unknown')
                vip_fee = vip.get('viewing_fee', 0)
                vip_details.append(f"{vip_name}: {vip_fee:,}$")
            print(f"   üìã D√©tail VIPs: {vip_details}")
            
            # Simuler la partie jusqu'√† la fin
            print("\n   üéÆ Simulation de la partie jusqu'√† la fin...")
            max_simulations = 10
            simulation_count = 0
            
            while simulation_count < max_simulations:
                simulation_count += 1
                sim_response = requests.post(f"{API_BASE}/games/{game_id}/simulate-event", timeout=10)
                
                if sim_response.status_code != 200:
                    self.log_result("VIP Automatic Collection - Game Simulation Level 3", False, f"Event simulation failed - HTTP {sim_response.status_code}")
                    return
                
                sim_data = sim_response.json()
                game_state = sim_data.get('game', {})
                
                if game_state.get('completed', False):
                    print(f"   ‚úÖ Partie termin√©e apr√®s {simulation_count} √©v√©nements")
                    winner = game_state.get('winner', {})
                    winner_name = winner.get('name', 'Inconnu') if winner else 'Inconnu'
                    winner_number = winner.get('number', 'N/A') if winner else 'N/A'
                    print(f"   üèÜ Gagnant: {winner_name} (#{winner_number})")
                    break
            
            if simulation_count >= max_simulations:
                self.log_result("VIP Automatic Collection - Game Simulation Level 3", False, f"Game did not complete after {max_simulations} simulations")
                return
            
            # V√©rifier la collecte automatique des gains VIP
            print("\n   üí∞ V√©rification de la collecte automatique des gains VIP...")
            
            # R√©cup√©rer l'√©tat final de la partie
            final_game_response = requests.get(f"{API_BASE}/games/{game_id}", timeout=10)
            
            if final_game_response.status_code != 200:
                self.log_result("VIP Automatic Collection - Final Game State", False, f"Could not get final game data - HTTP {final_game_response.status_code}")
                return
                
            final_game_data = final_game_response.json()
            actual_game_earnings = final_game_data.get('earnings', 0)
            vip_earnings_collected = final_game_data.get('vip_earnings_collected', False)
            
            print(f"   üìä Gains VIP dans game.earnings: {actual_game_earnings:,}$")
            print(f"   üìä Gains VIP attendus: {expected_vip_earnings:,}$")
            print(f"   üîÑ Flag vip_earnings_collected: {vip_earnings_collected}")
            
            # V√©rifier que les gains correspondent exactement
            earnings_match = (actual_game_earnings == expected_vip_earnings)
            
            # V√©rifier l'√©tat du gamestate (argent du joueur)
            gamestate_response = requests.get(f"{API_BASE}/gamestate/", timeout=10)
            
            if gamestate_response.status_code != 200:
                self.log_result("VIP Automatic Collection - Gamestate Check", False, f"Could not get gamestate - HTTP {gamestate_response.status_code}")
                return
                
            gamestate_data = gamestate_response.json()
            current_money = gamestate_data.get('money', 0)
            
            print(f"   üí≥ Argent actuel du joueur: {current_money:,}$")
            
            # Tester la route vip-earnings-status
            status_response = requests.get(f"{API_BASE}/games/{game_id}/vip-earnings-status", timeout=10)
            
            if status_response.status_code != 200:
                self.log_result("VIP Automatic Collection - Status Route", False, f"Could not get VIP earnings status - HTTP {status_response.status_code}")
                return
                
            status_data = status_response.json()
            earnings_available = status_data.get('earnings_available', 0)
            can_collect = status_data.get('can_collect', False)
            
            print(f"   üìã VIP earnings status - earnings_available: {earnings_available:,}$")
            print(f"   üìã VIP earnings status - can_collect: {can_collect}")
            
            # √âvaluer les r√©sultats
            success = True
            issues = []
            
            if not earnings_match:
                success = False
                percentage = (actual_game_earnings / expected_vip_earnings * 100) if expected_vip_earnings > 0 else 0
                issues.append(f"‚ùå Gains VIP incorrects: {actual_game_earnings:,}$ au lieu de {expected_vip_earnings:,}$ attendus (seulement {percentage:.1f}% des gains VIP calcul√©s)")
            
            if not vip_earnings_collected:
                success = False
                issues.append(f"‚ùå Flag vip_earnings_collected = false (devrait √™tre true)")
            
            # Tester si la collecte manuelle est encore possible (ne devrait pas l'√™tre si collecte automatique a fonctionn√©)
            manual_collect_response = requests.post(f"{API_BASE}/games/{game_id}/collect-vip-earnings", timeout=10)
            
            if manual_collect_response.status_code == 200:
                success = False
                issues.append(f"‚ùå Collecte manuelle encore possible (HTTP 200) alors qu'elle devrait √™tre bloqu√©e si la collecte automatique avait fonctionn√©")
            
            if success:
                self.log_result("VIP Automatic Collection - Salon Level 3", True, 
                              f"‚úÖ COLLECTE AUTOMATIQUE FONCTIONNE - Gains VIP: {actual_game_earnings:,}$, Flag collect√©: {vip_earnings_collected}")
            else:
                self.log_result("VIP Automatic Collection - Salon Level 3", False, 
                              f"‚ùå PROBL√àME CRITIQUE CONFIRM√â - TESTS EXHAUSTIFS SELON REVIEW REQUEST FRAN√áAISE", issues)
            
            # Test 2: Salon niveau 1 (1 VIP) pour comparaison
            print("\nüîç TEST 2: SALON NIVEAU 1 (1 VIP) - TEST COMPARATIF")
            print("-" * 70)
            
            self.test_salon_level(1, 1)
            
            # Test 3: Salon niveau 6 (12 VIPs) pour test complet
            print("\nüîç TEST 3: SALON NIVEAU 6 (12 VIPs) - TEST NIVEAU SUP√âRIEUR")
            print("-" * 70)
            
            self.test_salon_level(6, 12)
            
        except Exception as e:
            self.log_result("VIP Automatic Collection System", False, f"Error during test: {str(e)}")
    
    def test_salon_level(self, salon_level, expected_vips):
        """Test a specific salon level"""
        try:
            game_request = {
                "player_count": 25,
                "game_mode": "standard", 
                "selected_events": [1, 2, 3],
                "manual_players": [],
                "vip_salon_level": salon_level
            }
            
            response = requests.post(f"{API_BASE}/games/create", 
                                   json=game_request, 
                                   headers={"Content-Type": "application/json"},
                                   timeout=15)
            
            if response.status_code == 200:
                game_data = response.json()
                game_id = game_data.get('id')
                
                # R√©cup√©rer les VIPs pour ce salon level
                vips_response = requests.get(f"{API_BASE}/vips/game/{game_id}?salon_level={salon_level}", timeout=10)
                
                if vips_response.status_code == 200:
                    vips_data = vips_response.json()
                    expected_earnings = sum(vip.get('viewing_fee', 0) for vip in vips_data)
                    
                    print(f"   ‚úÖ Salon niveau {salon_level}: {len(vips_data)} VIP(s) avec viewing_fee total: {expected_earnings:,}$")
                    
                    # Simuler rapidement jusqu'√† la fin
                    for i in range(5):
                        sim_resp = requests.post(f"{API_BASE}/games/{game_id}/simulate-event", timeout=10)
                        if sim_resp.status_code == 200:
                            sim_data = sim_resp.json()
                            if sim_data.get('game', {}).get('completed', False):
                                break
                    
                    # V√©rifier les gains
                    final_resp = requests.get(f"{API_BASE}/games/{game_id}", timeout=10)
                    if final_resp.status_code == 200:
                        final_data = final_resp.json()
                        actual_earnings = final_data.get('earnings', 0)
                        vip_collected = final_data.get('vip_earnings_collected', False)
                        
                        if actual_earnings == expected_earnings and vip_collected:
                            print(f"   ‚úÖ Salon niveau {salon_level}: Calcul correct ({actual_earnings:,}$ attendu = {actual_earnings:,}$ obtenu), collect√© automatiquement: {vip_collected}")
                        else:
                            percentage = (actual_earnings / expected_earnings * 100) if expected_earnings > 0 else 0
                            print(f"   ‚ùå Salon niveau {salon_level}: Calcul incorrect ({expected_earnings:,}$ attendu ‚â† {actual_earnings:,}$ obtenu). Seuls ~{percentage:.0f}% des gains sont calcul√©s, collect√©: {vip_collected}")
                else:
                    print(f"   ‚ùå Salon niveau {salon_level}: Erreur lors de la r√©cup√©ration des VIPs - HTTP {vips_response.status_code}")
            else:
                print(f"   ‚ùå Salon niveau {salon_level}: Erreur lors de la cr√©ation de partie - HTTP {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå Salon niveau {salon_level}: Erreur - {str(e)}")
    
    def run_tests(self):
        """Run all VIP automatic collection tests"""
        print("üá´üá∑ D√âMARRAGE DES TESTS VIP AUTOMATIC COLLECTION - 2025-08-02")
        print("=" * 80)
        print(f"Backend URL: {BACKEND_URL}")
        print(f"API Base: {API_BASE}")
        print("=" * 80)
        
        # Test server connectivity first
        try:
            response = requests.get(f"{API_BASE}/", timeout=10)
            if response.status_code == 200:
                print("‚úÖ Backend server accessible")
            else:
                print(f"‚ùå Backend server error: HTTP {response.status_code}")
                return
        except Exception as e:
            print(f"‚ùå Cannot connect to backend: {str(e)}")
            return
        
        # Run the main test
        self.test_vip_automatic_collection_system()
        
        # Print summary
        print("\n" + "=" * 80)
        print("üìä R√âSUM√â DES TESTS VIP AUTOMATIC COLLECTION")
        print("=" * 80)
        print(f"Total des tests: {self.total_tests}")
        print(f"Tests r√©ussis: {self.passed_tests}")
        print(f"Tests √©chou√©s: {self.total_tests - self.passed_tests}")
        print(f"Taux de r√©ussite: {(self.passed_tests / self.total_tests * 100):.1f}%" if self.total_tests > 0 else "0%")
        
        if self.total_tests - self.passed_tests > 0:
            print(f"\n‚ùå TESTS √âCHOU√âS:")
            for result in self.results:
                if "‚ùå FAIL" in result["status"]:
                    print(f"   - {result['test']}: {result['message']}")
        
        print("\nüèÅ TESTS TERMIN√âS")
        print("=" * 80)

if __name__ == "__main__":
    tester = VIPAutomaticCollectionTester()
    tester.run_tests()